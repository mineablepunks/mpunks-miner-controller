/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OtherpunksInterface extends ethers.utils.Interface {
  functions: {
    "addAttributeRanges(uint16[],uint16[][][])": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseMask()": FunctionFragment;
    "baseRangeMax()": FunctionFragment;
    "baseRanges(uint256,uint256)": FunctionFragment;
    "baseShift()": FunctionFragment;
    "baseToGender(uint8)": FunctionFragment;
    "blockUnminedOriginalPunk(uint96,uint16)": FunctionFragment;
    "blockedAssets(uint96)": FunctionFragment;
    "burnAlreadyMinedOriginalPunk(uint256,uint16)": FunctionFragment;
    "contractSealed()": FunctionFragment;
    "difficultyTarget()": FunctionFragment;
    "disallowedOnAlienOrApe(uint8)": FunctionFragment;
    "firstPunkId()": FunctionFragment;
    "genderToSlotMaxes(uint256,uint256)": FunctionFragment;
    "genderToSlotToAttributeRanges(uint256,uint256,uint256,uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getSlotShifts()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isValidNonce(uint256)": FunctionFragment;
    "lastMinedPunkAssets()": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nextPunkId()": FunctionFragment;
    "numMined()": FunctionFragment;
    "otherPunksConfiguration()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "punkAssetsToId(uint96)": FunctionFragment;
    "punkIdToAssets(uint256)": FunctionFragment;
    "punksData()": FunctionFragment;
    "removeTrainingWheels()": FunctionFragment;
    "render(uint256)": FunctionFragment;
    "renderSvg(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "seedToPunkAssets(uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "slotMasks(uint256)": FunctionFragment;
    "slotShifts(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAttributeRanges",
    values: [BigNumberish[], BigNumberish[][][]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseMask", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseRangeMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseRanges",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "baseShift", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseToGender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockUnminedOriginalPunk",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockedAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnAlreadyMinedOriginalPunk",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractSealed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "difficultyTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disallowedOnAlienOrApe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "firstPunkId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genderToSlotMaxes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "genderToSlotToAttributeRanges",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSlotShifts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastMinedPunkAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextPunkId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "numMined", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "otherPunksConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "punkAssetsToId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "punkIdToAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "punksData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeTrainingWheels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "render",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renderSvg",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seedToPunkAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "slotMasks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slotShifts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAttributeRanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseMask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseRangeMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseRanges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseShift", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseToGender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockUnminedOriginalPunk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnAlreadyMinedOriginalPunk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractSealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "difficultyTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disallowedOnAlienOrApe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstPunkId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genderToSlotMaxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genderToSlotToAttributeRanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSlotShifts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastMinedPunkAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextPunkId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numMined", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "otherPunksConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "punkAssetsToId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "punkIdToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "punksData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTrainingWheels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "render", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renderSvg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seedToPunkAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slotMasks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slotShifts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BurnOriginalPunk(uint16)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnOriginalPunk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class Otherpunks extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OtherpunksInterface;

  functions: {
    addAttributeRanges(
      slotMaxes: BigNumberish[],
      slotRanges: BigNumberish[][][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseMask(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseRangeMax(overrides?: CallOverrides): Promise<[number]>;

    baseRanges(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    baseShift(overrides?: CallOverrides): Promise<[number]>;

    baseToGender(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    blockUnminedOriginalPunk(
      punkAssets: BigNumberish,
      originalPunkIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blockedAssets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    burnAlreadyMinedOriginalPunk(
      punkId: BigNumberish,
      originalPunkIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractSealed(overrides?: CallOverrides): Promise<[boolean]>;

    difficultyTarget(overrides?: CallOverrides): Promise<[BigNumber]>;

    disallowedOnAlienOrApe(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    firstPunkId(overrides?: CallOverrides): Promise<[BigNumber]>;

    genderToSlotMaxes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    genderToSlotToAttributeRanges(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSlotShifts(overrides?: CallOverrides): Promise<[number[]]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidNonce(
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastMinedPunkAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextPunkId(overrides?: CallOverrides): Promise<[BigNumber]>;

    numMined(overrides?: CallOverrides): Promise<[number]>;

    otherPunksConfiguration(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    punkAssetsToId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    punkIdToAssets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    punksData(overrides?: CallOverrides): Promise<[string]>;

    removeTrainingWheels(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    render(punkId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    renderSvg(
      punkId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seedToPunkAssets(
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slotMasks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    slotShifts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAttributeRanges(
    slotMaxes: BigNumberish[],
    slotRanges: BigNumberish[][][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseMask(overrides?: CallOverrides): Promise<BigNumber>;

  baseRangeMax(overrides?: CallOverrides): Promise<number>;

  baseRanges(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  baseShift(overrides?: CallOverrides): Promise<number>;

  baseToGender(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  blockUnminedOriginalPunk(
    punkAssets: BigNumberish,
    originalPunkIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blockedAssets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  burnAlreadyMinedOriginalPunk(
    punkId: BigNumberish,
    originalPunkIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractSealed(overrides?: CallOverrides): Promise<boolean>;

  difficultyTarget(overrides?: CallOverrides): Promise<BigNumber>;

  disallowedOnAlienOrApe(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  firstPunkId(overrides?: CallOverrides): Promise<BigNumber>;

  genderToSlotMaxes(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  genderToSlotToAttributeRanges(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getSlotShifts(overrides?: CallOverrides): Promise<number[]>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidNonce(
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastMinedPunkAssets(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nextPunkId(overrides?: CallOverrides): Promise<BigNumber>;

  numMined(overrides?: CallOverrides): Promise<number>;

  otherPunksConfiguration(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  punkAssetsToId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  punkIdToAssets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  punksData(overrides?: CallOverrides): Promise<string>;

  removeTrainingWheels(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  render(punkId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renderSvg(punkId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seedToPunkAssets(
    seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slotMasks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  slotShifts(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAttributeRanges(
      slotMaxes: BigNumberish[],
      slotRanges: BigNumberish[][][],
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseMask(overrides?: CallOverrides): Promise<BigNumber>;

    baseRangeMax(overrides?: CallOverrides): Promise<number>;

    baseRanges(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    baseShift(overrides?: CallOverrides): Promise<number>;

    baseToGender(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    blockUnminedOriginalPunk(
      punkAssets: BigNumberish,
      originalPunkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    blockedAssets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    burnAlreadyMinedOriginalPunk(
      punkId: BigNumberish,
      originalPunkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contractSealed(overrides?: CallOverrides): Promise<boolean>;

    difficultyTarget(overrides?: CallOverrides): Promise<BigNumber>;

    disallowedOnAlienOrApe(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    firstPunkId(overrides?: CallOverrides): Promise<BigNumber>;

    genderToSlotMaxes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    genderToSlotToAttributeRanges(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSlotShifts(overrides?: CallOverrides): Promise<number[]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidNonce(
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastMinedPunkAssets(overrides?: CallOverrides): Promise<BigNumber>;

    mint(_nonce: BigNumberish, overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nextPunkId(overrides?: CallOverrides): Promise<BigNumber>;

    numMined(overrides?: CallOverrides): Promise<number>;

    otherPunksConfiguration(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    punkAssetsToId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    punkIdToAssets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    punksData(overrides?: CallOverrides): Promise<string>;

    removeTrainingWheels(overrides?: CallOverrides): Promise<void>;

    render(punkId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renderSvg(punkId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    seedToPunkAssets(
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    slotMasks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slotShifts(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    BurnOriginalPunk(
      originalPunkId?: null
    ): TypedEventFilter<[number], { originalPunkId: number }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    addAttributeRanges(
      slotMaxes: BigNumberish[],
      slotRanges: BigNumberish[][][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseMask(overrides?: CallOverrides): Promise<BigNumber>;

    baseRangeMax(overrides?: CallOverrides): Promise<BigNumber>;

    baseRanges(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseShift(overrides?: CallOverrides): Promise<BigNumber>;

    baseToGender(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blockUnminedOriginalPunk(
      punkAssets: BigNumberish,
      originalPunkIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blockedAssets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnAlreadyMinedOriginalPunk(
      punkId: BigNumberish,
      originalPunkIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractSealed(overrides?: CallOverrides): Promise<BigNumber>;

    difficultyTarget(overrides?: CallOverrides): Promise<BigNumber>;

    disallowedOnAlienOrApe(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    firstPunkId(overrides?: CallOverrides): Promise<BigNumber>;

    genderToSlotMaxes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genderToSlotToAttributeRanges(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSlotShifts(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidNonce(
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastMinedPunkAssets(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextPunkId(overrides?: CallOverrides): Promise<BigNumber>;

    numMined(overrides?: CallOverrides): Promise<BigNumber>;

    otherPunksConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    punkAssetsToId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    punkIdToAssets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    punksData(overrides?: CallOverrides): Promise<BigNumber>;

    removeTrainingWheels(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    render(punkId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renderSvg(
      punkId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seedToPunkAssets(
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slotMasks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slotShifts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAttributeRanges(
      slotMaxes: BigNumberish[],
      slotRanges: BigNumberish[][][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseMask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseRangeMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseRanges(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseShift(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseToGender(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockUnminedOriginalPunk(
      punkAssets: BigNumberish,
      originalPunkIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blockedAssets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnAlreadyMinedOriginalPunk(
      punkId: BigNumberish,
      originalPunkIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractSealed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    difficultyTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disallowedOnAlienOrApe(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstPunkId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genderToSlotMaxes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genderToSlotToAttributeRanges(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSlotShifts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidNonce(
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastMinedPunkAssets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextPunkId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numMined(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    otherPunksConfiguration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    punkAssetsToId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    punkIdToAssets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    punksData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTrainingWheels(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    render(
      punkId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renderSvg(
      punkId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seedToPunkAssets(
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slotMasks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slotShifts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
