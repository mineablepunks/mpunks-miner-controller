/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PublicCryptopunksDataInterface extends ethers.utils.Interface {
  functions: {
    "SVG_FOOTER()": FunctionFragment;
    "SVG_HEADER()": FunctionFragment;
    "addAsset(uint8,bytes,string)": FunctionFragment;
    "addComposites(uint64,uint32,uint64,uint32,uint64,uint32,uint64,uint32)": FunctionFragment;
    "assetNames(uint8)": FunctionFragment;
    "assets(uint8)": FunctionFragment;
    "composites(uint64)": FunctionFragment;
    "cryptopunksData()": FunctionFragment;
    "getPackedAssetNames(uint96)": FunctionFragment;
    "isPackedEqualToOriginalPunkIndex(uint96,uint16)": FunctionFragment;
    "packAssets(uint8[12])": FunctionFragment;
    "palette()": FunctionFragment;
    "render(uint96)": FunctionFragment;
    "renderSvg(uint96)": FunctionFragment;
    "sealContract()": FunctionFragment;
    "setPalette(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SVG_FOOTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SVG_HEADER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAsset",
    values: [BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addComposites",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "composites",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cryptopunksData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPackedAssetNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPackedEqualToOriginalPunkIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "packAssets",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(functionFragment: "palette", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "render",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renderSvg",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sealContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPalette",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "SVG_FOOTER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SVG_HEADER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addComposites",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetNames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "composites", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cryptopunksData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPackedAssetNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPackedEqualToOriginalPunkIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "packAssets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "palette", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "render", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renderSvg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sealContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPalette", data: BytesLike): Result;

  events: {};
}

export class PublicCryptopunksData extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PublicCryptopunksDataInterface;

  functions: {
    SVG_FOOTER(overrides?: CallOverrides): Promise<[string]>;

    SVG_HEADER(overrides?: CallOverrides): Promise<[string]>;

    addAsset(
      index: BigNumberish,
      encoding: BytesLike,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addComposites(
      key1: BigNumberish,
      value1: BigNumberish,
      key2: BigNumberish,
      value2: BigNumberish,
      key3: BigNumberish,
      value3: BigNumberish,
      key4: BigNumberish,
      value4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assetNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    composites(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    cryptopunksData(overrides?: CallOverrides): Promise<[string]>;

    getPackedAssetNames(
      packed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { text: string }>;

    isPackedEqualToOriginalPunkIndex(
      packed: BigNumberish,
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    packAssets(
      assetsArr: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    palette(overrides?: CallOverrides): Promise<[string]>;

    render(packed: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    renderSvg(
      packed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { svg: string }>;

    sealContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPalette(
      _palette: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SVG_FOOTER(overrides?: CallOverrides): Promise<string>;

  SVG_HEADER(overrides?: CallOverrides): Promise<string>;

  addAsset(
    index: BigNumberish,
    encoding: BytesLike,
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addComposites(
    key1: BigNumberish,
    value1: BigNumberish,
    key2: BigNumberish,
    value2: BigNumberish,
    key3: BigNumberish,
    value3: BigNumberish,
    key4: BigNumberish,
    value4: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assetNames(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  composites(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  cryptopunksData(overrides?: CallOverrides): Promise<string>;

  getPackedAssetNames(
    packed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isPackedEqualToOriginalPunkIndex(
    packed: BigNumberish,
    punkIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  packAssets(
    assetsArr: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  palette(overrides?: CallOverrides): Promise<string>;

  render(packed: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renderSvg(packed: BigNumberish, overrides?: CallOverrides): Promise<string>;

  sealContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPalette(
    _palette: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SVG_FOOTER(overrides?: CallOverrides): Promise<string>;

    SVG_HEADER(overrides?: CallOverrides): Promise<string>;

    addAsset(
      index: BigNumberish,
      encoding: BytesLike,
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addComposites(
      key1: BigNumberish,
      value1: BigNumberish,
      key2: BigNumberish,
      value2: BigNumberish,
      key3: BigNumberish,
      value3: BigNumberish,
      key4: BigNumberish,
      value4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    assetNames(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    composites(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    cryptopunksData(overrides?: CallOverrides): Promise<string>;

    getPackedAssetNames(
      packed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isPackedEqualToOriginalPunkIndex(
      packed: BigNumberish,
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    packAssets(
      assetsArr: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    palette(overrides?: CallOverrides): Promise<string>;

    render(packed: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renderSvg(packed: BigNumberish, overrides?: CallOverrides): Promise<string>;

    sealContract(overrides?: CallOverrides): Promise<void>;

    setPalette(_palette: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    SVG_FOOTER(overrides?: CallOverrides): Promise<BigNumber>;

    SVG_HEADER(overrides?: CallOverrides): Promise<BigNumber>;

    addAsset(
      index: BigNumberish,
      encoding: BytesLike,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addComposites(
      key1: BigNumberish,
      value1: BigNumberish,
      key2: BigNumberish,
      value2: BigNumberish,
      key3: BigNumberish,
      value3: BigNumberish,
      key4: BigNumberish,
      value4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assetNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    composites(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cryptopunksData(overrides?: CallOverrides): Promise<BigNumber>;

    getPackedAssetNames(
      packed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPackedEqualToOriginalPunkIndex(
      packed: BigNumberish,
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    packAssets(
      assetsArr: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    palette(overrides?: CallOverrides): Promise<BigNumber>;

    render(packed: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renderSvg(
      packed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sealContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPalette(
      _palette: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SVG_FOOTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SVG_HEADER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAsset(
      index: BigNumberish,
      encoding: BytesLike,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addComposites(
      key1: BigNumberish,
      value1: BigNumberish,
      key2: BigNumberish,
      value2: BigNumberish,
      key3: BigNumberish,
      value3: BigNumberish,
      key4: BigNumberish,
      value4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assetNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    composites(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cryptopunksData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPackedAssetNames(
      packed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPackedEqualToOriginalPunkIndex(
      packed: BigNumberish,
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    packAssets(
      assetsArr: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    palette(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    render(
      packed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renderSvg(
      packed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sealContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPalette(
      _palette: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
